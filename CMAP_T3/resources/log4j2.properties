status = warn
name= properties_configuration

# Give directory path where log files should get stored
property.basePath = D:/Server/log/cmap/


# ConsoleAppender will print logs on console
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout
# Specify the pattern of the logs
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n


# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${basePath}cmap.log
appender.rolling.filePattern= ${basePath}cmap_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n
appender.rolling.policies.type = Policies
# Rotate log file each day and keep 30 days worth
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age = 30d


appender.db.type = Jdbc
appender.db.name = MySQLDatabase
# replace databaseName.tableName
appender.db.tableName = sys_error_log
appender.db.cf.type = ConnectionFactory
# change class path and method name
appender.db.cf.class = com.cmap.configuration.hibernate.ConnectionFactory
appender.db.cf.method = getConnection
# define column type, column name and value
appender.db.col1.type = Column
appender.db.col1.name = LOG_ID
appender.db.col1.pattern = %u

appender.db.col2.type = Column
appender.db.col2.name = ENTRY_DATE
appender.db.col2.isEventTimestamp = true

appender.db.col3.type = Column
appender.db.col3.name = LOGGER
appender.db.col3.pattern = %logger

appender.db.col4.type = Column
appender.db.col4.name = LOG_LEVEL
appender.db.col4.pattern = %level

appender.db.col5.type = Column
appender.db.col5.name = MESSAGE
appender.db.col5.pattern = %m

appender.db.col6.type = Column
appender.db.col6.name = EXCEPTION
appender.db.col6.pattern = %throwable


# Mention package name here in place of example. Classes in this package or subpackages will use ConsoleAppender and RollingFileAppender for logging         
#logger.example.name = example
#logger.example.level = error
#logger.example.additivity = false
#logger.example.appenderRef.rolling.ref = fileLogger
#logger.example.appenderRef.console.ref = consoleLogger
#logger.example.appenderRef.db.ref = MySQLDatabase

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = debug
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.rolling.level = info
rootLogger.appenderRef.console.ref = consoleLogger
rootLogger.appenderRef.console.level = info
rootLogger.appenderRef.db.ref = MySQLDatabase
rootLogger.appenderRef.db.level = error